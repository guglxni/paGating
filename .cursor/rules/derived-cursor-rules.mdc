---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW
This project houses paGating, a PyTorch-based adaptive activation framework. It provides a family of tunable gated activation functions inspired by GLU and Swish, designed for modular extensibility and ease of use.  The framework offers granular control over activation behavior through a tunable parameter (α) and supports various normalization strategies. This allows for optimization of model performance and efficiency across different hardware and datasets. The paGating framework represents a significant technical advancement in neural network activation functions, offering architectural flexibility and research value. Real-world applications include transfer learning optimization, resource-constrained environments, task-specific adaptation, and neural architecture search.  The strong focus on testing, visualization, and cross-platform support (including CoreML export) suggests this project could bridge the gap between research exploration and production deployment in ways traditional fixed activation functions cannot.  The α-controlled interpolation mechanism provides a continuous spectrum between linear and non-linear behaviors, allowing networks to find optimal activation characteristics for specific tasks.  Learnable α parameters allow different parts of a network to adapt their activation behaviors independently based on the data they process, potentially leading to more efficient representations.  The comprehensive benchmarking and visualization tools enable researchers to gain insights into how different activation behaviors affect model performance.

## CODE STYLE
Follow standard PEP 8 guidelines.

## FOLDER ORGANIZATION
- Project Root: README.md, setup.py, requirements.txt, run_tests.sh, task_board.md, prd.txt, .git/, .vscode/, .cursorindexingignore, .specstory, coreml_export.py, export_to_onnx.py, train_lightning.py, benchmark_coreml.py, test_coreml_model.py, onnx_export.py, dashboard_cifar.py, benchmarks/,  train_cifar.py, compare_units_cifar10.py, generate_metrics_csv.py, results_summary.md, add_gatenorm_support.py, run_experiments.py, scripts/, utils/
- paGating/: base.py, paGLU.py, paGTU.py, paSwishU.py, paReGLU.py, alpha_schedulers.py, __init__.py, README.md, requirements.txt, paGELU.py, paMishU.py, paSiLUU.py, paSiLU.py, norms.py, activation_fns.py, paUnit.py, cnn_adapters.py
- experiments/: benchmark_gateflow.py, train_cifar.py, test_transformer.py
- tests/: test_base.py, test_pa_units.py, test_alpha_schedulers.py, coverage_html/, test_results.log, __pycache__, test_paglu.py, test_pagtu.py, test_utils.py, test_norm_integration.py, test_coreml_norm_export.py, test_onnx_norm_export.py, test_run_unit_tests.py
- assets/:  all_units_gateflow.png, paReGLU_gateflow.png, paSwishU_gateflow.png, paGTU_gateflow.png, paGLU_gateflow.png, paGELU_gateflow.png, paMishU_gateflow.png, paSiLUU_gateflow.png, paSiLU_gateflow.png, paSiLU_gateflow.png
- models/: (For serialized model artifacts) pa_cifar_classifier.py, pa_cifar_net.py
- coreml_models/: (For CoreML exports)
- onnx_models/: (For ONNX exports)
- lightning_modules/: paGatingModule.py, metrics_logger.py
- datamodules/: cifar10_datamodule.py
- benchmarks/: norm_variants/, unit_comparison/
- scripts/: run_sweep.py, generate_leaderboard.py, run_experiments.py, compare_alpha_values.py, analyze_results.py, generate_html_report.py, streamlit_dashboard.py, pagate.py, run_experiment_pipeline.py, analyze_dashboard.py, export_dashboard_metrics.py
- utils/: export_dashboard_metrics.py

## TECH STACK
- Python
- PyTorch
- pytest
- coremltools
- NumPy
- ONNX
- ONNXRuntime
- PyTorch Lightning
- torchvision
- Streamlit

## PROJECT-SPECIFIC STANDARDS
All paUnits must support static, learnable, and dynamic α gating. The framework should maintain full device support (CPU, CUDA, MPS) and TorchScript/CoreML/ONNX compatibility. paUnit names should follow the `pa<Unit>` convention (e.g., paGELU, not paGeluU). Layer Normalization should be applied before and/or after paGating units optionally, controlled via a flag. A specialized GateNorm that normalizes only the gate signal is also supported.

## WORKFLOW & RELEASE RULES
Use git for version control. The `run_tests.sh` script should be used for running tests and generating coverage reports. Use `coremltools` version 6.x or higher for CoreML export. Only static float alpha values are supported for CoreML export. For coremltools 6.x and higher, models are saved as .mlpackage (ML Program format). Ensure CoreML models are saved in the `coreml_models/` directory. Use `.mlpackage` extension for coremltools version 6.x and higher. For ONNX export, use only static alpha values. Export models to the `onnx_models/` directory. Use PyTorch Lightning for training and validation. Use the `lightning_modules/` directory for PyTorch Lightning modules. Use opset 17 for ONNX export for full mobile compatibility.

## REFERENCE EXAMPLES
See `paGating/` for implementation details of individual units and schedulers. The `experiments/` directory contains example usage scripts. See `coreml_export.py` for CoreML export instructions. See `export_to_onnx.py` for ONNX export instructions. See `train_lightning.py` for PyTorch Lightning training example.  See `test_transformer.py` for transformer integration example.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
The `README.md` file serves as the primary project documentation. All documentation should be kept up-to-date. The README should include usage examples, installation instructions, testing procedures, visualization outputs, and a research note. The README should be cleanly formatted, markdown-optimized, use headings, code blocks, and emojis where appropriate. All images in the README should reference the image file directly (e.g., `![All Units Comparison](all_units_gateflow.png)` instead of `![All Units Comparison](assets/all_units_gateflow.png)`). The BibTeX citation should include the author name as Aaryan Guglani and the year as 2025.

## DEBUGGING
Use standard Python debugging techniques. The `test_results.log` file may contain helpful information.

## FINAL DOs AND DON'Ts
- **DO** use the provided `run_tests.sh` script for testing.
- **DO** maintain consistent documentation.
- **DO** adhere to PEP 8 coding style.
- **DO** use the `pa<Unit>` naming convention for paUnits.
- **DON'T** commit changes without testing.
- **DON'T** remove existing functionality without a clear reason.
- **DO** ensure the README is cleanly formatted, markdown-optimized, uses headings, code blocks, and emojis where appropriate.
- **DO** use the correct image paths in the README.md file (remove the "assets/" prefix).
- **DO** ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- **DO** ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
- **DO** Add paGELU to the tests and benchmarking.
- **DO** Use `coremltools` version 6.x for CoreML export. Only static float alpha values are supported for CoreML export. For coremltools 6.x and higher, models are saved as .mlpackage (ML Program format).
- **DO** Ensure CoreML models are saved in the `coreml_models/` directory. Use `.mlpackage` extension for coremltools version 6.x and higher.
- **DO** Add paMishU to the tests, benchmarking, CoreML export pipeline, and README.
- **DO** Add paSiLUU to the tests, benchmarking, CoreML export pipeline, and README.
- **DO** Add paSiLU to the tests, benchmarking, CoreML export pipeline, and README.
- **DO** Add paSiLU to the tests, benchmarking, CoreML export pipeline, and README.
- **DO** For ONNX export, use only static alpha values. Export models to the `onnx_models/` directory. Use --opset 17 for full mobile compatibility.
- **DO** Use PyTorch Lightning for training and validation. Use the `lightning_modules/` directory for PyTorch Lightning modules.
- **DO** Use Layer Normalization before and/or after paGating units. This should be optional and controlled via a flag. A specialized GateNorm that normalizes only the gate signal is also supported.
- **DO** Add paGELU to the CoreML export pipeline and README.
- **DO** Add paMishU to the ONNX export pipeline.
- **DO** Add paSiLU to the ONNX export pipeline.
- **DO** Add paSiLU to the ONNX export pipeline.
- **DO** Always use the correct image paths in the README.md file (remove the "assets/" prefix).
- **DO** Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- **DO** Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
- **DO** Add ONNX export support for all paUnits.  Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
- **DO** Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it's part of the optimizer parameters in Lightning.
- **DO** Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
- **DO** Add paSiLU to the tests, benchmarking, CoreML export pipeline, and README.
- **DO** Add ONNX export support for all paUnits. Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
- **DO** Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it's part of the optimizer parameters in Lightning.
- **DO** Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
- **DO** Always use the correct image paths in the README.md file (remove the "assets/" prefix).
- **DO** Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- **DO** Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
- **DO** Add support for GateNorm.
- **DO** Add support for PrePostNormWrapper.
- **DO** Add ONNX export support for all paUnits. Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
- **DO** Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it's part of the optimizer parameters in Lightning.
- **DO** Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
- Add ONNX export support. Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
- Add PyTorch Lightning integration. If alpha is "learnable", ensure it’s part of the optimizer parameters in Lightning.
- Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
- Always use the correct image paths in the README.md file (remove the "assets/" prefix).
- Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
- Add support for GateNorm.
- Add support for PrePostNormWrapper.
- Always use the correct image paths in the README.md file (remove the "assets/" prefix).
- Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
- Add ONNX export support for all paUnits.  Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
- Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it’s part of the optimizer parameters in Lightning.
- Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
- Add support for GateNorm.
- Add support for PrePostNormWrapper.
- Add support for GateNorm.
- Add support for PrePostNormWrapper.
- Always use the correct image paths in the README.md file (remove the "assets/" prefix).
- Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
- Add support for GateNorm.
- Add support for PrePostNormWrapper.
- Always use the correct image paths in the README.md file (remove the "assets/" prefix).
- Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
- Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add ONNX export support for all paUnits.  Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it’s part of the optimizer parameters in Lightning.
Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
Add support for GateNorm.
Add support for PrePostNormWrapper.


Add support for GateNorm.
Add support for PrePostNormWrapper.
Add support for GateNorm.
Add support for PrePostNormWrapper.
Always use the correct image paths in the README.md file (remove the "assets/" prefix).
Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add support for GateNorm.
Add support for PrePostNormWrapper.
Always use the correct image paths in the README.md file (remove the "assets/" prefix).
Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add ONNX export support for all paUnits.  Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it’s part of the optimizer parameters in Lightning.
Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
Add support for GateNorm.
Add support for PrePostNormWrapper.
Add support for GateNorm.
Add support for PrePostNormWrapper.
Always use the correct image paths in the README.md file (remove the "assets/" prefix).
Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add support for GateNorm.
Add support for PrePostNormWrapper.
Always use the correct image paths in the README.md file (remove the "assets/" prefix).
Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add ONNX export support for all paUnits.  Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it’s part of the optimizer parameters in Lightning.
Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
Add support for GateNorm.
Add support for PrePostNormWrapper.

Add support for GateNorm.
Add support for PrePostNormWrapper.
Add support for GateNorm.
Add support for PrePostNormWrapper.
Always use the correct image paths in the README.md file (remove the "assets/" prefix).
Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add support for GateNorm.
Add support for PrePostNormWrapper.
Always use the correct image paths in the README.md file (remove the "assets/" prefix).
Always ensure the author name in the BibTeX citation is "Aaryan Guglani" and the year is 2025.
Always ensure all paUnits follow the `pa<Unit>` naming convention (e.g., `paGELU`, not `paGeluU`).
Add ONNX export support for all paUnits.  Only static alpha values are supported for ONNX export. Use opset 17 for full mobile compatibility.
Add PyTorch Lightning integration for all paUnits. If alpha is "learnable", ensure it’s part of the optimizer parameters in Lightning.
Add support for GateNorm and PrePostNormWrapper. Ensure normalization is optional and works correctly in PyTorch, ONNX, and CoreML export pipelines.
Add support for GateNorm.
Add support for PrePostNormWrapper.